# **********************************************************************
#
# Short description:
# Makefile for mausc_cxc
# **********************************************************************
#
# Ericsson AB 2015 All rights reserved.
# The information in this document is the property of Ericsson.
# Except as specifically authorized in writing by Ericsson, the receiver of this
# document shall keep the information contained herein confidential and shall protect
# the same in whole or in part from disclosure and dissemination to third parties.
# Disclosure and disseminations to the receivers employees shall only be made
# on a strict need to know basis.
#
# **********************************************************************
#
# Rev        Date         Name      What
# -----      ----------   --------  --------------------------
#            2015-01-03   xdtthng   Created
#
# **********************************************************************
 
NTACS_PATH = ../../../../../../../cm4ap/ntacs
export NTACS_PATH
include ../../../../../../../IO_Developments/Tools/linux_conf_file/common.mk
include /vobs/mas/mas_anz/mausc_cnz/tools_apg/UPcampaign_maiden.mk

CXC_NAME    ?= CPHW_MAUSCBIN
CXC_NR      ?= CXC1372147_6
CXC_VER     ?= P1A03
CXC_OLD_VER ?= P1A00

BASE_SW_VER ?= 3.0.0-P1A03

CURDIR  = $(shell pwd)
CXCPATH = $(CURDIR)
CXCDIR  = $(CXCPATH)

# Define MAUSC app name
MAUSC_APNAME   = cphw_mauscd

CAA_DIRS = ../mausc_adm_caa

# Define mausc directories
MAUSC_DIR  = ../mausc_adm_caa

# Define CPPCHECK src and inc directories
CPPCKECK_SRCS = $(MAUSC_DIR)/src/*.cpp

CPPCKECK_INCS = -I$(MAUSC_DIR)/inc 

# Define CCCC src
CCCC_SRCS = $(MAUSC_DIR)/src/* 

# Define SLOCCOUNT src
SLOCCOUNT_SRCS = $(MAUSC_DIR)

# TODO: no need for now, do later
DOXYGEN_OUTPUT = $(DOCDIR)/docgen
BLOCK_NAME     = $(CXC_NAME)
BLOCK_VERSION  = $(CXC_VER)
BLOCK_SEARCH  = $(MAUSC_DIR)/inc $(MAUSC_DIR)/src 
				 
export DOXYGEN_OUTPUT
export BLOCK_NAME
export BLOCK_VERSION
export BLOCK_SEARCH

.PHONY: all clean distclean
all clean distclean: 
	@for i in $(CAA_DIRS) ; do \
		(echo "cd $$i" ; \
		 cd $$i ; \
		 $(MAKE) $(MFLAGS) CXCDIR=$(CXCPATH) $@) ;\
	done

.PHONY: prebuild
prebuild:
	$(call ct_co,$(RPMDIR)/$(CXC_NAME)-$(CXC_NR)-$(CXC_VER).x86_64.rpm)
	$(call sdp_prebuild,$(CXCPATH),$(BLOCK_NAME),$(CXC_VER),$(CXC_OLD_VER),$(CXC_NR))	
	$(call up_prebuild,$(BLOCK_NAME))
	@for i in $(CAA_DIRS) ; do \
		(echo "cd $$i" ; \
		cd $$i ; \
		$(MAKE) $(MFLAGS) CXCDIR=$(CXCPATH) prebuild) ;\
	done

.PHONY: postbuild
postbuild:
	$(call ct_ci,$(RPMDIR)/$(CXC_NAME)-$(CXC_NR)-$(CXC_VER).x86_64.rpm)
	$(call sdp_postbuild,$(CXCPATH),$(BLOCK_NAME),$(CXC_VER),$(CXC_OLD_VER),$(CXC_NR))
	$(call up_postbuild,$(BLOCK_NAME))
	@for i in $(CAA_DIRS) ; do \
		(echo "cd $$i" ; \
		cd $$i ; \
		$(MAKE) $(MFLAGS) CXCDIR=$(CXCPATH) postbuild) ;\
	done

.PHONY: undobuild
undobuild:
	$(call ct_unco,$(RPMDIR)/$(CXC_NAME)-$(CXC_NR)-$(CXC_VER).x86_64.rpm)
	$(call sdp_undobuild,$(CXCPATH),$(BLOCK_NAME),$(CXC_VER),$(CXC_OLD_VER),$(CXC_NR))
	@for i in $(CAA_DIRS) ; do \
		(echo "cd $$i" ; \
		cd $$i ; \
		$(MAKE) $(MFLAGS) CXCDIR=$(CXCPATH) undobuild) ;\
	done

.PHONY: rpm_package
rpm_package:
	$(call rpm_file_creation,mausc.spec,$(CXC_NAME),$(CXC_NR),$(CXC_VER))

.PHONY: sdp_package
sdp_package:
ifeq ($(CXC_OLD_VER),P1A00)
	$(SILENT)$(ECHO) 'SDP packaging ...'
	$(call sdp_creation_US3,$(CXCPATH),$(BLOCK_NAME),$(CXC_VER),$(CXC_OLD_VER),$(CXC_NR))
	$(SILENT)$(ECHO) 'UP packaging ...'
	$(call up_creation_maiden,$(CXC_NAME),$(CXC_NR),$(CXC_VER),$(CXC_OLD_VER),$(CXCPATH),$(BASE_SW_VER))
	$(SILENT)$(ECHO) 'UP packaging for maiden installation completes'
else
	$(SILENT)$(ECHO) 'SDP packaging ...'
	$(call sdp_creation_US3,$(CXCPATH),$(BLOCK_NAME),$(CXC_VER),$(CXC_OLD_VER),$(CXC_NR))
	$(SILENT)$(ECHO) 'UP packaging ...'
	$(call up_creation,$(CXC_NAME),$(CXC_NR),$(CXC_VER),$(CXC_OLD_VER),$(CXCPATH),$(BASE_SW_VER))
endif

.PHONY: up_package
up_package:
ifeq ($(CXC_OLD_VER),P1A00)
	$(SILENT)$(ECHO) 'UP packaging ...'
	$(call up_creation_maiden,$(CXC_NAME),$(CXC_NR),$(CXC_VER),$(CXC_OLD_VER),$(CXCPATH),$(BASE_SW_VER))
	$(SILENT)$(ECHO) 'UP packaging for maiden installation completes'
else
	$(SILENT)$(ECHO) 'UP packaging ...'
	$(call up_creation,$(CXC_NAME),$(CXC_NR),$(CXC_VER),$(CXC_OLD_VER),$(CXCPATH),$(BASE_SW_VER))
endif

.PHONY: tar_package
tar_package:
	$(call tar_creation,$(BLOCK_NAME),$(CXC_NR),$(CXC_VER))

.PHONY: nightbuild
nightbuild: prebuild distclean all rpm_package sdp_package undobuild

.PHONY: release
release: all rpm_package sdp_package tar_package documentation metrics
	
.PHONY: metrics
metrics: cppcheck_m cccc_m sloccount_m

.PHONY: documentation
documentation:
	$(call doc_creation)

.PHONY: cppcheck_m
cppcheck_m:
	$(call cppcheck_doc_creation,$(CPPCKECK_SRCS),$(CPPCKECK_INCS))

.PHONY: cccc_m
cccc_m:		
	$(call cccc_doc_creation,$(CCCC_SRCS))

.PHONY: sloccount_m
sloccount_m:
	$(call sloccount_doc_creation,$(SLOCCOUNT_SRCS))

.PHONY: help
help:
	$(SILENT)$(ECHO) 'Usage: make [target] [option]'
	$(SILENT)$(ECHO) 'target:'
	$(SILENT)$(ECHO) '  all                Build all targets (default)'
	$(SILENT)$(ECHO) '  release            Build all targets and create rpm, metrics'
	$(SILENT)$(ECHO) '  clean              Removes object files'
	$(SILENT)$(ECHO) '  distclean          Removes object and binary files'	
	$(SILENT)$(ECHO) '  help               Print help'
	$(SILENT)$(ECHO) 'option:'
	$(SILENT)$(ECHO) '  BUILD_VERBOSE=0|1  (0: quiet build (default), 1: verbose build)'
	$(SILENT)$(ECHO) '  COVERAGE=0|1       (0: no coverage (default), 1: coverage)'

