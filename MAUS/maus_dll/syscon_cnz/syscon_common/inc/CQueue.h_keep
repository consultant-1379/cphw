/*
 * CQueue.h
 *
 *  Created on: Nov 6, 2015
 *      Author: xdtthng
 */

#ifndef CQUEUE_H_
#define CQUEUE_H_

#include <queue>
#include "boost/thread/mutex.hpp"
#include "boost/thread/condition_variable.hpp"

//#include <boost/shared_ptr.hpp>
//#include <boost/make_shared.hpp>


template<typename Data>
class CQueue
{
public:
    void push(Data const& data)
    {
        boost::mutex::scoped_lock lock(m_mutex);
        m_queue.push(data);
        lock.unlock();
        m_conditionVariable.notify_one();
    }

    bool empty() const
    {
        boost::mutex::scoped_lock lock(m_mutex);
        return m_queue.empty();
    }

    bool try_pop(Data& popped_value)
    {
        boost::mutex::scoped_lock lock(m_mutex);
        if(m_queue.empty())
        {
            return false;
        }

        popped_value=m_queue.front();
        m_queue.pop();
        return true;
    }

    void wait_and_pop(Data& popped_value)
    {
        boost::mutex::scoped_lock lock(m_mutex);
        while(m_queue.empty())
        {
            m_conditionVariable.wait(lock);
        }

        popped_value=m_queue.front();
        m_queue.pop();
    }

private:
    std::queue<Data> m_queue;
    mutable boost::mutex m_mutex;
    boost::condition_variable m_conditionVariable;

};

#endif /* CQUEUE_H_ */
